{
    "docs": [
        {
            "location": "/",
            "text": "Welcome\n\n\nHello and welcome to the documentation of the Doors+ asset!\nHere you'll find more information\nabout every aspect of the tool as well as a Quick-Start guide and a Support section.\n\n\n\n\nUseful Links\n\n\nQuick-Start Guide\n\n\nSupport and Contact\n\n\nWrite a Review",
            "title": "Welcome"
        },
        {
            "location": "/#welcome",
            "text": "Hello and welcome to the documentation of the Doors+ asset!\nHere you'll find more information\nabout every aspect of the tool as well as a Quick-Start guide and a Support section.   Useful Links  Quick-Start Guide  Support and Contact  Write a Review",
            "title": "Welcome"
        },
        {
            "location": "/liteversion/",
            "text": "Lite Version\n\n\nYou can try out a basic, free version of the script before you make your purchase. It has limited functionality but will\ngive you a sense of what to expect from the full version. You can download the free version \nhere\n.\n\n\nHere is a guide to get you started with the lite version of Alex's Door System!\n\n\nInstallation and Setup\n\n\nFirst of all, import the asset into your project. The asset will create a folder 'Ameye' under your Assets directory.\n\n\n\n\nAfter you've imported the asset, you'll need to create the tag 'Door'. You can simply do this by doing\nTools>Alex's Door System>Create Door tag. Alternatively you could manually create the tag by doing Edit>Project Settings>Tags and Layers.\n\n\nBasic Setup\n\n\nNow that we're done setting up the asset, we can actually start creating some doors!\nWe will first create a player in our scene. Make sure that the player can move around and look around\nin your scene. If you want to, you can use the player prefab that is included in the asset. Notice that the\nplayer has the detection component attached to it.\nIf you are using your own player controller, make sure to add this detection component as well.\nIn the inspector of the detection component, make sure that the reach variable is set to 5 and the character variable is set to \"E\".\n\n\n\n\nNow our player is done and we can start creating a door! Just create a basic door shape out of a default cube and place it in your scene.\nAfter you have created a door that you're happy with, add the door component to it.\nTake a look at the door component. Let's set the initial angle to 0, the final angle to 90, and the speed to 2.\n\n\n\n\nWe've set up everything needed so let's hit play! As expected we can enter the blue trigger zone, and when we press 'E',\nthe door will rotate 90 degrees with a speed of 2 (duration of 0.5 seconds).\n\n\nDetection Component\n\n\nThe detection component allows the player to detect doors in your scene. It ray-casts continuously and checks what objects are in front of him/her.\n\n\n\n\n\n\n\n\n\n\nVariable\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nReach\n\n\nWithin this radius, the player is able to open/close the door.\n\n\n\n\n\n\nCharacter\n\n\nThe character that the player has to press in order to open/close the door.\n\n\n\n\n\n\nText Prefab\n\n\nThe text that will be displayed when the player is looking at a door.\n\n\n\n\n\n\nCrosshair Prefab\n\n\nThe crosshair that will be displayed at the center of the screen.\n\n\n\n\n\n\nDebug Ray Color\n\n\nThe color of the line shown in scene-view that represents the ray-cast.\n\n\n\n\n\n\nOpacity\n\n\nThe opacity of the debug-ray.\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\nMake sure the 'Reach' variable is not set to zero.'.\n\n\n\n\nDoor Component\n\n\nThe door component manages the actual rotation of the door.\n\n\n\n\n\n\n\n\n\n\nVariable\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nInitial Angle\n\n\nThe initial angle of the door.\n\n\n\n\n\n\nRotation Angle\n\n\nThe amount of degrees the door will rotate.\n\n\n\n\n\n\nRotation Side\n\n\nWhether the door should rotate left or right.\n\n\n\n\n\n\nSpeed\n\n\nThe speed of the rotation.\n\n\n\n\n\n\nTimes Moveable\n\n\nHow many times the door will be able to move. If set to zero, the door will be able to rotate an infinite amount of times.\n\n\n\n\n\n\nHinge Type\n\n\nWhether the rotation axis of the door is centered or already correctly positioned.\n\n\n\n\n\n\nHinge Position\n\n\nThe position of the hinge.\n\n\n\n\n\n\nVisualize Hinge\n\n\nWhether or not the hinge should be visualized in the game for debugging purposed or not.\n\n\n\n\n\n\nHinge Color\n\n\nThe color of the visualization of the hinge.\n\n\n\n\n\n\n\n\nCorrectly Positioned or Centered?\n\n\nIn the door script you have the option to select whether or not the rotation axis of the door is already correctly positioned.\nTo check what you need to select, make sure to select pivot instead of center.\n\n\n\n\nAfter you've done that, take a look at your door. If the pivot handle is centered, select \"centered\" in your door script. If\nthe pivot handle is where the hinge should be, select \"Correctly Positioned\".\n\n\nChanging the text prefabs?\n\n\nSelect the text prefab in your project that you'd like to change. Click and drag it onto your hierarchy. Click on the prefab\nin the hierarchy window and unfold it to select 'Text 1'.\n\n\nSelect 'Text 1'.\n\n\n\n\nGo to you inspector window and change the settings to your liking. You can change the text, font,...\n\n\n\n\nAfter you've completed the changes you wanted to make, re-assign it to the prefab by clicking and dragging the object 'TextPrefab' in the\nhierarchy window back onto the prefab in your project window. After this, remove the prefab element that's still\nin the hierarchy window.\n\n\nThe same can be done for the 'Crosshair' prefab.\n\n\nLimitations\n\n\nThe lite version has some limitations compared to the pro version. A comprehensive list will be added here soon.\n\n\n\n\nTip\n\n\nAlso check out the \nFAQ\n!",
            "title": "Lite Version"
        },
        {
            "location": "/liteversion/#lite-version",
            "text": "You can try out a basic, free version of the script before you make your purchase. It has limited functionality but will\ngive you a sense of what to expect from the full version. You can download the free version  here .  Here is a guide to get you started with the lite version of Alex's Door System!",
            "title": "Lite Version"
        },
        {
            "location": "/liteversion/#installation-and-setup",
            "text": "First of all, import the asset into your project. The asset will create a folder 'Ameye' under your Assets directory.   After you've imported the asset, you'll need to create the tag 'Door'. You can simply do this by doing\nTools>Alex's Door System>Create Door tag. Alternatively you could manually create the tag by doing Edit>Project Settings>Tags and Layers.",
            "title": "Installation and Setup"
        },
        {
            "location": "/liteversion/#basic-setup",
            "text": "Now that we're done setting up the asset, we can actually start creating some doors!\nWe will first create a player in our scene. Make sure that the player can move around and look around\nin your scene. If you want to, you can use the player prefab that is included in the asset. Notice that the\nplayer has the detection component attached to it.\nIf you are using your own player controller, make sure to add this detection component as well.\nIn the inspector of the detection component, make sure that the reach variable is set to 5 and the character variable is set to \"E\".   Now our player is done and we can start creating a door! Just create a basic door shape out of a default cube and place it in your scene.\nAfter you have created a door that you're happy with, add the door component to it.\nTake a look at the door component. Let's set the initial angle to 0, the final angle to 90, and the speed to 2.   We've set up everything needed so let's hit play! As expected we can enter the blue trigger zone, and when we press 'E',\nthe door will rotate 90 degrees with a speed of 2 (duration of 0.5 seconds).",
            "title": "Basic Setup"
        },
        {
            "location": "/liteversion/#detection-component",
            "text": "The detection component allows the player to detect doors in your scene. It ray-casts continuously and checks what objects are in front of him/her.      Variable  Description      Reach  Within this radius, the player is able to open/close the door.    Character  The character that the player has to press in order to open/close the door.    Text Prefab  The text that will be displayed when the player is looking at a door.    Crosshair Prefab  The crosshair that will be displayed at the center of the screen.    Debug Ray Color  The color of the line shown in scene-view that represents the ray-cast.    Opacity  The opacity of the debug-ray.      Warning  Make sure the 'Reach' variable is not set to zero.'.",
            "title": "Detection Component"
        },
        {
            "location": "/liteversion/#door-component",
            "text": "The door component manages the actual rotation of the door.      Variable  Description      Initial Angle  The initial angle of the door.    Rotation Angle  The amount of degrees the door will rotate.    Rotation Side  Whether the door should rotate left or right.    Speed  The speed of the rotation.    Times Moveable  How many times the door will be able to move. If set to zero, the door will be able to rotate an infinite amount of times.    Hinge Type  Whether the rotation axis of the door is centered or already correctly positioned.    Hinge Position  The position of the hinge.    Visualize Hinge  Whether or not the hinge should be visualized in the game for debugging purposed or not.    Hinge Color  The color of the visualization of the hinge.",
            "title": "Door Component"
        },
        {
            "location": "/liteversion/#correctly-positioned-or-centered",
            "text": "In the door script you have the option to select whether or not the rotation axis of the door is already correctly positioned.\nTo check what you need to select, make sure to select pivot instead of center.   After you've done that, take a look at your door. If the pivot handle is centered, select \"centered\" in your door script. If\nthe pivot handle is where the hinge should be, select \"Correctly Positioned\".",
            "title": "Correctly Positioned or Centered?"
        },
        {
            "location": "/liteversion/#changing-the-text-prefabs",
            "text": "Select the text prefab in your project that you'd like to change. Click and drag it onto your hierarchy. Click on the prefab\nin the hierarchy window and unfold it to select 'Text 1'.  Select 'Text 1'.   Go to you inspector window and change the settings to your liking. You can change the text, font,...   After you've completed the changes you wanted to make, re-assign it to the prefab by clicking and dragging the object 'TextPrefab' in the\nhierarchy window back onto the prefab in your project window. After this, remove the prefab element that's still\nin the hierarchy window.  The same can be done for the 'Crosshair' prefab.",
            "title": "Changing the text prefabs?"
        },
        {
            "location": "/liteversion/#limitations",
            "text": "The lite version has some limitations compared to the pro version. A comprehensive list will be added here soon.   Tip  Also check out the  FAQ !",
            "title": "Limitations"
        },
        {
            "location": "/quickstart/",
            "text": "Quick-Start\n\n\nImporting and initial setup\n\n\nFirst of all, import the asset into your project. The asset will create a folder 'Ameye' under your Assets directory.\nI strongly advise you to not mess around too much with this folder structure. As far\nas I know there are no parts of the asset that depend on this structure, but you never know.\n\n\nBasic setup\n\n\nNow that we're done setting up the asset, we can actually start creating some doors!\nWe will first create a player in our scene. Make sure that the player can move around and look around\nin your scene. If you want to, you can use the player prefab that is included in the asset. Notice that the\nplayer has the \ndoor detection component\n attached to it. If\nyou are using your own player controller, make sure to add this door detection component as well.\nIn the inspector of the detection component, set the reach variable to a value of around 5.\n\n\n\n\nNow our player is done and we can start creating a door! Just create a basic door shape out of a default cube and place it in your scene.\nAfter you have a created a door that you're happy with, add the \ndoor rotation component\n to it. The hierarchy structure\naround your door will automatically be changed. Notice that some icons will appear in the hierarchy to\nvisualize which object has the actual door script on it. Do not change this hierarchy structure.\n\n\n\n\nTake a look at the door rotation component. We will be adding a single rotation to it by pressing the 'plus' button on\nthe Rotation Timeline. After we've added a rotation block, there will appear a blue zone in the scene and the hierarchy around\nyour door will be changed again. Let's set the values of the rotation block to an initial angle of 0, a final angle of 90, a speed of 2 and\na smoothstep curve.\n\n\n\n\nNow that our rotation itself is set up, we will take a look at that blue zone that just spawned. This zone is a \ntrigger zone\n\nand it will control our rotation. Select the 'Move Trigger' in the hierarchy 'and take a look at the inspector window.\nWe will ask for our player to press \"E\" in order to rotate the door so toggle 'Pressed' and put the letter 'e' in the field that appears.\nIf you'd like to, you can resize the trigger zone in your scene so it's a bit bigger.\n\n\n\n\nWe've set up everything required so let's hit play! As expected we can enter the blue trigger zone, and when we press 'E',\nthe door will rotate 90 degrees with a speed of 2 (duration of 0.5 seconds).",
            "title": "Quick-Start"
        },
        {
            "location": "/quickstart/#quick-start",
            "text": "",
            "title": "Quick-Start"
        },
        {
            "location": "/quickstart/#importing-and-initial-setup",
            "text": "First of all, import the asset into your project. The asset will create a folder 'Ameye' under your Assets directory.\nI strongly advise you to not mess around too much with this folder structure. As far\nas I know there are no parts of the asset that depend on this structure, but you never know.",
            "title": "Importing and initial setup"
        },
        {
            "location": "/quickstart/#basic-setup",
            "text": "Now that we're done setting up the asset, we can actually start creating some doors!\nWe will first create a player in our scene. Make sure that the player can move around and look around\nin your scene. If you want to, you can use the player prefab that is included in the asset. Notice that the\nplayer has the  door detection component  attached to it. If\nyou are using your own player controller, make sure to add this door detection component as well.\nIn the inspector of the detection component, set the reach variable to a value of around 5.   Now our player is done and we can start creating a door! Just create a basic door shape out of a default cube and place it in your scene.\nAfter you have a created a door that you're happy with, add the  door rotation component  to it. The hierarchy structure\naround your door will automatically be changed. Notice that some icons will appear in the hierarchy to\nvisualize which object has the actual door script on it. Do not change this hierarchy structure.   Take a look at the door rotation component. We will be adding a single rotation to it by pressing the 'plus' button on\nthe Rotation Timeline. After we've added a rotation block, there will appear a blue zone in the scene and the hierarchy around\nyour door will be changed again. Let's set the values of the rotation block to an initial angle of 0, a final angle of 90, a speed of 2 and\na smoothstep curve.   Now that our rotation itself is set up, we will take a look at that blue zone that just spawned. This zone is a  trigger zone \nand it will control our rotation. Select the 'Move Trigger' in the hierarchy 'and take a look at the inspector window.\nWe will ask for our player to press \"E\" in order to rotate the door so toggle 'Pressed' and put the letter 'e' in the field that appears.\nIf you'd like to, you can resize the trigger zone in your scene so it's a bit bigger.   We've set up everything required so let's hit play! As expected we can enter the blue trigger zone, and when we press 'E',\nthe door will rotate 90 degrees with a speed of 2 (duration of 0.5 seconds).",
            "title": "Basic setup"
        },
        {
            "location": "/doorrotation/",
            "text": "Door Rotation\n\n\nThe rotation component of the door is where you actually control what rotations the door has to perform. In the component\nitself, you have 2 tabs. You have a 'Door' tab and a 'Rotations' tab.\n\n\n\n\nDoor Tab\n\n\nIn the door tab you have the options to set the door parameters. First you'll have to\nselect if the door you're using is scaled in Unity3D units. If you were to create\na cube in Unity and put in the same dimensions as your door and the cube and\nthe door take up exactly the same space, your door is is in Unity 3D Units.\n\n\nNext you'll need to select the pivot position. Is the pivot of the door centered\nor is it correctly positioned where the hinge should be? To see where\nthe pivot of your door is, set the tool handle in Unity to be active at the object's\npivot point.\n\n\n\n\nAfter that, set the hinge position of the door. Should it be at the left side or the right side of the door?\n\n\nRotation Settings\n\n\nIn the rotation tab you can set if the performed rotation should always take the shortest\nway or if it should take the default way. You can also pick the angle convention. The angle\nconvention basically dictates if degrees should be counted clockwise or counterclockwise.\nLastly you have a 'reset on leave' option. This will make it so that when you leave\na trigger zone, the door will reset to its original position. This only works when using single rotations.\n\n\n\n\nThe next thing you'll need to look at is the rotation timeline. This is one of the\nmost powerful components in Doors+.\n\n\n\n\nThe rotation timeline controls all of your rotations chronologically. You can add single rotations,\nlooped rotations or swing rotations. These rotations will play chronologically from top to bottom.\n\n\nOnce you've added a rotation, you can change its settings. For all the rotations you can set both the\ninitial angle, the final angle and the speed of the rotation.\n\n\nSingle rotations are rotations that just get performed once. Looped rotations are rotations that can\nbe repeated for a number of time. Lastly swing rotations are rotations that know 3 states. Let's\nsay the 3 states are -90\u00b0, 0\u00b0 and 90\u00b0. The door then has the ability to rotate differently depending\non whether the player is standing in front of the door or on the other side.\nThis type of door is commonly used in several games such as Fortnite and Dishonered.\n\n\nRotation Curves\n\n\nThe rotation curve can control how the speed of the door will change overtime. You can pick curves\nbetween presets such as linear, smoothstep, exponential,... or you can create your own custom curve.\n\n\nA steeper curve will mean that the door will rotate faster and a less steep curve\nmeans that the door will rotate slower. Make sure that your curve\nstarts at 0 and ends at 1 on the x axis and y axis.",
            "title": "Rotations"
        },
        {
            "location": "/doorrotation/#door-rotation",
            "text": "The rotation component of the door is where you actually control what rotations the door has to perform. In the component\nitself, you have 2 tabs. You have a 'Door' tab and a 'Rotations' tab.",
            "title": "Door Rotation"
        },
        {
            "location": "/doorrotation/#door-tab",
            "text": "In the door tab you have the options to set the door parameters. First you'll have to\nselect if the door you're using is scaled in Unity3D units. If you were to create\na cube in Unity and put in the same dimensions as your door and the cube and\nthe door take up exactly the same space, your door is is in Unity 3D Units.  Next you'll need to select the pivot position. Is the pivot of the door centered\nor is it correctly positioned where the hinge should be? To see where\nthe pivot of your door is, set the tool handle in Unity to be active at the object's\npivot point.   After that, set the hinge position of the door. Should it be at the left side or the right side of the door?",
            "title": "Door Tab"
        },
        {
            "location": "/doorrotation/#rotation-settings",
            "text": "In the rotation tab you can set if the performed rotation should always take the shortest\nway or if it should take the default way. You can also pick the angle convention. The angle\nconvention basically dictates if degrees should be counted clockwise or counterclockwise.\nLastly you have a 'reset on leave' option. This will make it so that when you leave\na trigger zone, the door will reset to its original position. This only works when using single rotations.   The next thing you'll need to look at is the rotation timeline. This is one of the\nmost powerful components in Doors+.   The rotation timeline controls all of your rotations chronologically. You can add single rotations,\nlooped rotations or swing rotations. These rotations will play chronologically from top to bottom.  Once you've added a rotation, you can change its settings. For all the rotations you can set both the\ninitial angle, the final angle and the speed of the rotation.  Single rotations are rotations that just get performed once. Looped rotations are rotations that can\nbe repeated for a number of time. Lastly swing rotations are rotations that know 3 states. Let's\nsay the 3 states are -90\u00b0, 0\u00b0 and 90\u00b0. The door then has the ability to rotate differently depending\non whether the player is standing in front of the door or on the other side.\nThis type of door is commonly used in several games such as Fortnite and Dishonered.",
            "title": "Rotation Settings"
        },
        {
            "location": "/doorrotation/#rotation-curves",
            "text": "The rotation curve can control how the speed of the door will change overtime. You can pick curves\nbetween presets such as linear, smoothstep, exponential,... or you can create your own custom curve.  A steeper curve will mean that the door will rotate faster and a less steep curve\nmeans that the door will rotate slower. Make sure that your curve\nstarts at 0 and ends at 1 on the x axis and y axis.",
            "title": "Rotation Curves"
        },
        {
            "location": "/doortrigger/",
            "text": "Trigger Zones\n\n\nThis door system heavily relies on trigger zones to create proper player-door interactions.\nTrigger zones are drawn as colored volumes (boxes or spheres) in the scene. You can position/rotate/scale them however you want and change\ntheir visual appearance.\n\n\n\n\nEvery trigger you see, is connected to a rotation block of a door. Looped and swing rotations both have 2 trigger zones. Single rotations have 1 trigger zone.\nTrigger zones will automatically be added to your scene/hierarchy whenever you create a rotation. You also have the option to\nadd multiple trigger zones that control the same rotation.\n\n\n\n\nTrigger Component\n\n\nEvery trigger zone has a 'Door Trigger' component attached to it. This component allows you to control how the trigger zone behaves.\nTrigger zones continuously check a certain set of conditions. If all conditions are met, the trigger zone sends a signal to the door, and a rotation will take place.\n\n\n\n\nYou can set what the zones look for in order to allow a rotation.\n\n\nPlayer Requirements\n\n\n\n\n\n\n\n\nRequirement\n\n\nDescription\n\n\nTakes\n\n\n\n\n\n\n\n\n\n\nTag\n\n\nDoes the object that entered the trigger zone have a certain tag?\n\n\nTag\n\n\n\n\n\n\nName\n\n\nDoes the object that entered the trigger zone has a certain name?\n\n\nString\n\n\n\n\n\n\nLooking At\n\n\nIs the player looking at a certain object?\n\n\nGameObject\n\n\n\n\n\n\nPressed\n\n\nHas the user pressed a certain key?\n\n\nKeyCode String\n\n\n\n\n\n\nScript\n\n\nDoes the player have a certain script component?\n\n\nMonoBehaviour\n\n\n\n\n\n\nIs Object\n\n\nIs there a certain object in the trigger zone?\n\n\nGameObject",
            "title": "Trigger Zones"
        },
        {
            "location": "/doortrigger/#trigger-zones",
            "text": "This door system heavily relies on trigger zones to create proper player-door interactions.\nTrigger zones are drawn as colored volumes (boxes or spheres) in the scene. You can position/rotate/scale them however you want and change\ntheir visual appearance.   Every trigger you see, is connected to a rotation block of a door. Looped and swing rotations both have 2 trigger zones. Single rotations have 1 trigger zone.\nTrigger zones will automatically be added to your scene/hierarchy whenever you create a rotation. You also have the option to\nadd multiple trigger zones that control the same rotation.",
            "title": "Trigger Zones"
        },
        {
            "location": "/doortrigger/#trigger-component",
            "text": "Every trigger zone has a 'Door Trigger' component attached to it. This component allows you to control how the trigger zone behaves.\nTrigger zones continuously check a certain set of conditions. If all conditions are met, the trigger zone sends a signal to the door, and a rotation will take place.   You can set what the zones look for in order to allow a rotation.",
            "title": "Trigger Component"
        },
        {
            "location": "/doortrigger/#player-requirements",
            "text": "Requirement  Description  Takes      Tag  Does the object that entered the trigger zone have a certain tag?  Tag    Name  Does the object that entered the trigger zone has a certain name?  String    Looking At  Is the player looking at a certain object?  GameObject    Pressed  Has the user pressed a certain key?  KeyCode String    Script  Does the player have a certain script component?  MonoBehaviour    Is Object  Is there a certain object in the trigger zone?  GameObject",
            "title": "Player Requirements"
        },
        {
            "location": "/doordetection/",
            "text": "Door Detection\n\n\nWhen setting up the doors in your game, you should add the Door Detection component to your player. This component\nallows the player to detect doors in your scene. It ray-casts continuously and checks what objects are in front of him/her.\n\n\nDetection Component\n\n\nIn the detection component, you have a reach variable. This variable determines how close to the door the player needs to be in order\nto be able to move it. You can display a visualization of that 'reach' in your scene if you'd like to.\n\n\n\n\nThere are also some slots where you can put text-prefabs that will be shown whenever a certain stage of the rotation is reached.\nFor example you could display 'Press \"E\" to open' whenever your player is looking at a door. You can also leave these slots\nempty.\n\n\n\n\nWarning\n\n\nMake sure the 'Reach' variable is not set to zero.'.\n\n\n\n\n\n\n\n\n\n\nPrefab\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nLooking at\n\n\nDoes the object that entered the trigger zone have a certain tag?\n\n\n\n\n\n\nIn Zone\n\n\nDoes the object that entered the trigger zone has a certain name?\n\n\n\n\n\n\nChrosshair\n\n\nIs the player looking at a certain object?",
            "title": "Door Detection"
        },
        {
            "location": "/doordetection/#door-detection",
            "text": "When setting up the doors in your game, you should add the Door Detection component to your player. This component\nallows the player to detect doors in your scene. It ray-casts continuously and checks what objects are in front of him/her.",
            "title": "Door Detection"
        },
        {
            "location": "/doordetection/#detection-component",
            "text": "In the detection component, you have a reach variable. This variable determines how close to the door the player needs to be in order\nto be able to move it. You can display a visualization of that 'reach' in your scene if you'd like to.   There are also some slots where you can put text-prefabs that will be shown whenever a certain stage of the rotation is reached.\nFor example you could display 'Press \"E\" to open' whenever your player is looking at a door. You can also leave these slots\nempty.   Warning  Make sure the 'Reach' variable is not set to zero.'.      Prefab  Description      Looking at  Does the object that entered the trigger zone have a certain tag?    In Zone  Does the object that entered the trigger zone has a certain name?    Chrosshair  Is the player looking at a certain object?",
            "title": "Detection Component"
        },
        {
            "location": "/doorsound/",
            "text": "Door Sound\n\n\nYou can easily add audio clips that play along with your rotations.\nGot to the rotation component on your door, and click on the 'add audio component' to get sounds working\nin your game.\n\n\n\n\nYou'll see a new audio interface that's divided into three tabs. Open, close and locked.\n\n\nThe open tab will control audio clips that get played when you're doing a single rotation, the first rotation of a looped rotation\nor the primary rotation of a swing rotation.\n\n\nThe close tab will control audio clips that get played when you're doing the second rotation of a looped rotation\nor the secondary rotation of a swing rotation.\n\n\nThe locked tab will control audio clips that get played when the player attempted to open/close the door but it failed.\n\n\n\n\nYou can add in clips that get played at the start of the rotation and clips that\nget played at the end of the rotation.\n\n\nEvery audio clip has several parameters.\n\n\nAudio Parameters\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nClip\n\n\nThe audio clip that will get played.\n\n\n\n\n\n\nVolume\n\n\nThe volume of the played audio clip.\n\n\n\n\n\n\nPlayback Speed\n\n\nThe playback speed of the audio clip. Equal to the pitch.\n\n\n\n\n\n\nDelay\n\n\nA delay on the audio clip to get them to play at exactly the right time.",
            "title": "Door Sound"
        },
        {
            "location": "/doorsound/#door-sound",
            "text": "You can easily add audio clips that play along with your rotations.\nGot to the rotation component on your door, and click on the 'add audio component' to get sounds working\nin your game.   You'll see a new audio interface that's divided into three tabs. Open, close and locked.  The open tab will control audio clips that get played when you're doing a single rotation, the first rotation of a looped rotation\nor the primary rotation of a swing rotation.  The close tab will control audio clips that get played when you're doing the second rotation of a looped rotation\nor the secondary rotation of a swing rotation.  The locked tab will control audio clips that get played when the player attempted to open/close the door but it failed.   You can add in clips that get played at the start of the rotation and clips that\nget played at the end of the rotation.  Every audio clip has several parameters.",
            "title": "Door Sound"
        },
        {
            "location": "/doorsound/#audio-parameters",
            "text": "Parameter  Description      Clip  The audio clip that will get played.    Volume  The volume of the played audio clip.    Playback Speed  The playback speed of the audio clip. Equal to the pitch.    Delay  A delay on the audio clip to get them to play at exactly the right time.",
            "title": "Audio Parameters"
        },
        {
            "location": "/support/",
            "text": "Support and Contact\n\n\nIf you are experiencing technical issues or bugs, don't hesitate to reach out to me!\nThe easiest way is to contact me through email but you can also contact me through the unity forums or Twitter.\nIf you'd like to request a feature, you can do that by contacting me through mail or posting something on the forum.\n\n\n\n\nUseful Links\n\n\nEmail\n\n\nForum\n\n\nTwitter\n\n\nTrello Board\n\n\nRoadmap\n\n\nWrite a Review\n\n\n\n\n\n\nTip\n\n\nWhen contacting me, please include the invoice number of the asset you purchased.",
            "title": "Support and Contact"
        },
        {
            "location": "/support/#support-and-contact",
            "text": "If you are experiencing technical issues or bugs, don't hesitate to reach out to me!\nThe easiest way is to contact me through email but you can also contact me through the unity forums or Twitter.\nIf you'd like to request a feature, you can do that by contacting me through mail or posting something on the forum.   Useful Links  Email  Forum  Twitter  Trello Board  Roadmap  Write a Review    Tip  When contacting me, please include the invoice number of the asset you purchased.",
            "title": "Support and Contact"
        }
    ]
}